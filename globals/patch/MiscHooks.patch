%% This file handle all the hooks that needs to be running at all time (And a few other misc stuff)

@Hook 82758 % 800E92A8
{
/%JAL     $Debugging_TestStuffwLButton
NOP%/
JAL     $UpdateGameState
NOP
% Track Inputs
JAL     $TrackInput % track an input and return a bool
NOP
J       800E92B0
LW      RA, 008C (SP)
}%/

%%%% Printing Code made by Rain %%%%%
#new:Data $PointerToStoreAsciiTo
{
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 %allocate space to store result
}

#new:Data $PointerToStoreStringTo
{
FF0D0F0F % set font to 0F width, 0F height
FF0500F7 % set color to 00 (black)
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
}

#new:Data $Formatters
{
20202020 20202020 20202020 20202564 00000000
%above hex is ascii for: "        %d"
}

#string $String_x
{
x[End]
}

% Made by Rain
#new:Function $ConvertAsciiToPM64String %takes args a0, a1
{
% a0 = where to store converted result
% a1 = where to read from
PUSH a0, a1
ORI t1, r0, 0020 %space
.loop
LB t0, 0000 (a1)
BEQ t0, r0, .endofascii
NOP
BEQ t0, t1, .isspace
NOP
ADDIU t0, t0, FFE0 %subtract 0x20 from ascii to get pm64 string hex
.store
SB t0, 0008 (a0)
ADDIU a0, a0, 0001
BEQ r0, r0, .loop
ADDIU a1, a1, 0001
.endofascii
ORI t0, r0, 00FD %pm64 string terminator
SB t0, 0008 (a0) %store terminator
POP a0, a1
JR RA
NOP
.isspace
BEQ r0, r0, .store
ORI t0, r0, 00F7
}

#export $ConvertAsciiToPM64String

#new:ASCII $ASCII_Format_Half
{
"%5u"
}

#new:ASCII $ASCII_Format_Byte
{
"%3u"
}

#new:ASCII $ASCII_Format_Time
{
"%02u"
}

#new:ASCII $ASCII_Buffer
{
"          "
}

#string $String_Buffer
{
[Color:00]             [END]
}

#new:ASCII $ASCII_Format_UByte
{
"%2u"
}

#string $String_Buffer_Color0A
{
[Color:0A]             [END]
}

#export $ASCII_Buffer
#export $ASCII_Format_UByte % used by PartnersHP.patch
#export $String_Buffer_Color0A % used by PartnersHP.patch

% Lock Player Inputs when you open a giant chest with AssignScript
@Hook 108A84 % 802E7204
{
PUSH    RA, A0, A1, A2, A3, V0, V1
LIO 	A1, *Flag_LockInputs_GiantChest
JAL 	~Func:get_variable
RESERVED
BEQ     V0, R0, .End
NOP
% Disable Player Inputs
JAL     ~Func:disable_player_input
NOP
.End
POP     RA, A0, A1, A2, A3, V0, V1
% Vanilla code
LW	    V0, 0040 (A0)
J       802E720C
ADDIU	A0, R0, 01D3
}

% Track an input by using a function instead of only scripting (it still need some scripting tho)
% Save a bool as true if the tracked input was pressed
#new:Function $TrackInput
{
PUSH    RA, A0, A1, A2, A3, T0, T1, T2, V0
LIO     A1, *TrackInput
JAL     ~Func:get_variable
RESERVED
BEQ     V0, R0, .End
NOP
% Check if the Tracker has been initialitated, if not turn the tracker off and end the function
LIO     T0, $Data_Inputs % save address
LW      T2, 4 (T0)
BNE     T2, R0, .StartTracker
NOP
% The track ins't initializated
SW      R0, 0 (T0)
SW      R0, 4 (T0)
LIO     A1, *TrackInput
JAL     ~Func:set_variable
CLEAR   A2
BEQ     R0, R0, .End
NOP
.StartTracker
LIO     T0, $Data_Inputs % save address
LBU     T1, 1 (T0) % Load Input to Track
LW      T2, 4 (T0)
LBU     T2, 0 (T2) % Load Address to Track
BNE     T1, T2, .End
NOP
% Save Bool as true
ORI     T0, R0, 1
SAB     T0, $Data_Inputs
.End
POP     RA, A0, A1, A2, A3, T0, T1, T2, V0
JR      RA
ORI     V0, R0, 2
}

% XX000000 00000000 = Input pressed bool
% 00XX0000 00000000 = Button to be tracked
% 0000XX00 00000000 = Amount of Stylish made on last move
% 000000XX 00000000 = unused
% 00000000 XXXXXXXX = Address to track (will always load a single byte)
#new:Data $Data_Inputs
{ 00000000 00000000 }

#export $Data_Inputs

#new:Function $ToogleCheats
{
    PUSH    RA, A0, A1, A2, A3, V0, V1
    LABU    T0, 80074037 % one time inputs
    ANDI    T1, T0, 20 % bit5 / L Button
    BEQ     T1, R0, .End
    NOP
    LABU    T0, 80074098 % Cheats
    ORI     T1, R0, 4
    BEQL    T0, T1, .SetCheat
    CLEAR   T0 % Set Back to Zero
    ADDIU   T0, T0, 1
    .SetCheat
    SAB     T0, 80074098
    % Play Sound
    ADDIU	A0, R0, 00C7 % sfx
    CLEAR 	A1
    COPY 	A2, A1
    JAL 	~Func:sfx_adjust_env_sound_pos
    COPY 	A3, A1
    .End
    % Print Current Cheat
    % Convert Data to ASCII
    LIO     A0, $ASCII_Buffer          % Pointer to Save ASCII
    LIO     A1, $ASCII_Format_Byte     % Type of Format to use
    LABU 	A2, 80074098		   % Data to Format
    JAL     ~Func:sprintf
    RESERVED
    % Convert ASCII to String and Print
    LIO     A1, $ASCII_Buffer       % previously converted ASCII
    LIO     A0, $String_Buffer      % Pointer to Save Final String
    JAL     $ConvertAsciiToPM64String % The final result will be stored in A0
    RESERVED
    ORI     A1, R0, 0075 % x pos
    ORI     A2, R0, 00CA % y pos
    SW      R0, 0014 (SP) % text fx / 0 = none
    JAL     ~Func:draw_string
    ORI     A3, R0, 00FF
    POP     RA, A0, A1, A2, A3, V0, V1
    JR      RA
    NOP
}

%========================
% Disable Focus mechanic

% Disable Focus from the Star Powers list
@Function 41B250 % 802A64C0
{
    SB	R0, 01F6 (S6)
}

% On battle fully heal when you pressing R and enable cheats
#new:Function $GodMode
{
    PUSH    RA, A0, A1, A2, A3, V0, V1
    LIO     A1, *GodMode
    JAL     ~Func:get_variable
    RESERVED
    BEQ     V0, R0, .End
    NOP
    % Toogle game cheats
    JAL     $ToogleCheats
    NOP
    % check the player is inside battle
    LABU    T0, 80074094 % game state
    ORI     T1, R0, 1
    BNE     T0, T1, .End
    NOP
    % check R button
    LABU    T0, 80074037 % 1 Frame Inputs
    ANDI    T0, T0, 10 % bit4 = R button
    BEQ     T0, R0, .End
    NOP
    % restore HP, FP and Star Power
    LABU    T0, 8010F293 % load max hp
    SAB     T0, 8010F292
    LABU    T0, 8010F296 % load max fp
    SAB     T0, 8010F295
    ORI     T0, R0, 0700 % always set sp as 7
    SAH     T0, 8010F520
    % play sound
    ADDIU	A0, R0, 0010 % Sound ID
    ADDIU	A2, R0, 18 % Volume
    JAL 	~Func:sfx_adjust_env_sound_pos
    CLEAR 	A1
    .End
    POP     RA, A0, A1, A2, A3, V0, V1
    JR      RA
    NOP
}

#new:Function $Debugging_TestStuffwLButton
{
    PUSH    RA, A0, A1, A2, A3, V0, V1
    % check the player is inside battle
    LABU    T0, 80074094 % game state
    ORI     T1, R0, 1
    BEQ     T0, T1, .End
    NOP
    % check L button
    LABU    T0, 80074037 % 1 Frame Inputs
    ANDI    T0, T0, 20 % bit5 = L button
    BEQ     T0, R0, .End
    NOP
    % do this when pressing L
    JAL     $Function_Debugging_RunTestScript
    NOP
    .End
    POP     RA, A0, A1, A2, A3, V0, V1
    JR      RA
    NOP
}

#new:Function $Function_Debugging_RunTestScript
{
    PUSH    RA
    CLEAR   A2
    LIA	    A0, $Script_Debugging_LButton
    JAL	    ~Func:start_script
    ADDIU	A1, R0, 1
    POP     RA
    JR      RA
    NOP
}

#new:Script:Map $Script_Debugging_LButton
{
    SetGroup 0
    SuspendAll 2
    Call    DisablePlayerInput ( .True )
    %Call    GotoMap ( $ASCII_lvl00 0 )
    Call    GotoMap ( $ASCII_other 0 )
    Return
    End
}

#new:ASCII $ASCII_other
{ "lvl_05" }

#new:ASCII $ASCII_lvl00
{ "lvl_00" }

% Change the flame color (used by Bonetail)
% Set *FireBreathColor colorID
% 0 = Orange (Default)
% 1 = Green
% 2 = Purple
% 3 = White
% 4 = Blue
%
% Flames are divided in 2 colors one for the outlines 
% and the other one for the body, each one use
% 3 bytes as RGB values.
%
% Call  PlayEffect 	( ~FX:FireBreath ... )
@Function 373158 % E006E9C8
{
LIO  T7 $Function_PlayFX_Flame_Color1 % Flame color 1 (body)
JR   T7
NOP
}

@Function 373198 % E006EA08
{
LIO  T7 $Function_PlayFX_Flame_Color2 % Flame color 2 (outline)
JR   T7
NOP
}

#new:Function $Function_PlayFX_Flame_Color1
{
PUSH    V0, V1, A0, A1, A2, A3, RA
LIO     A1, *FireBreathColor
JAL     ~Func:get_variable
RESERVED
COPY    T7, V0
POP     V0, V1, A0, A1, A2, A3, RA
BNE     T7, R0, .Green
NOP
.Orange
% vanilla code
% Flame Body Color
LBU	    V0, 0067 (S4)
LBU	    A1, 006B (S4)
LBU	    A3, 006F (S4)
BEQ     R0, R0, .End
NOP
.Green
ORI     T1, R0, 1
BNE     T7, T1, .Purple
NOP
% Flame Body Color
ORI     V0, R0, 50 % R
ORI     A1, R0, 87 % G
ORI     A3, R0, 63 % B
BEQ     R0, R0, .End
NOP
.Purple
ORI     T1, R0, 2
BNE     T7, T1, .White
NOP
% Flame Body Color
ORI     V0, R0, 87 % R
ORI     A1, R0, 50 % G
ORI     A3, R0, 87 % B
BEQ     R0, R0, .End
NOP
.White
ORI     T1, R0, 3
BNE     T7, T1, .Blue
NOP
% Flame Body Color
ORI     V0, R0, E0 % R
ORI     A1, R0, E0 % G
ORI     A3, R0, E0 % B
BEQ     R0, R0, .End
NOP
.Blue
ORI     T1, R0, 4
BNE     T7, T1, .BW
NOP
% Flame Body Color
ORI     V0, R0, 35 % R
ORI     A1, R0, E1 % G
ORI     A3, R0, EE % B
BEQ     R0, R0, .End
NOP
.BW
% Flame Body Color
ORI     V0, R0, 0 % R
ORI     A1, R0, 0 % G
ORI     A3, R0, 0 % B
.End
LIO     T7, E006E9D8
JR      T7
LBU	    T0, 0043 (S4) % flame alpha color?
}

#new:Function $Function_PlayFX_Flame_Color2
{
PUSH    V0, V1, A0, A1, A2, A3, RA
LIO     A1, *FireBreathColor
JAL     ~Func:get_variable
RESERVED
COPY    T7, V0
POP     V0, V1, A0, A1, A2, A3, RA
BNE     T7, R0, .Green
NOP
.Orange
% vanilla code
% Flame Outline Color
LBU	    A3, 0073 (S4)
LBU	    T0, 0077 (S4)
LBU	    T1, 007B (S4)
BEQ     R0, R0, .End
NOP
.Green
ORI     T1, R0, 1
BNE     T7, T1, .Purple
NOP
% Flame Outline Color
ORI     A3, R0, 1D % R
ORI     T0, R0, 41 % G
ORI     T1, R0, 3D % B
BEQ     R0, R0, .End
NOP
.Purple
ORI     T1, R0, 2
BNE     T7, T1, .White
NOP
% Flame Outline Color
ORI     A3, R0, 41 % R
ORI     T0, R0, 1D % G
ORI     T1, R0, 40 % B
BEQ     R0, R0, .End
NOP
.White
ORI     T1, R0, 3
BNE     T7, T1, .Blue
NOP
% Flame Outline Color
ORI     A3, R0, 76 % R
ORI     T0, R0, 76 % G
ORI     T1, R0, 76 % B
BEQ     R0, R0, .End
NOP
.Blue
ORI     T1, R0, 4
BNE     T7, T1, .BW
NOP
% Flame Outline Color
ORI     A3, R0, 26 % R
ORI     T0, R0, 77 % G
ORI     T1, R0, 7D % B
BEQ     R0, R0, .End
NOP
.BW
% Flame Outline Color
ORI     A3, R0, FF % R
ORI     T0, R0, FF % G
ORI     T1, R0, FF % B
.End
LIO     T7, E006EA18
JR      T7
ADDIU	V0, A2, 0018 % vanilla code
}

%================
% Battle - Fight won - Use the same animation as TTYD (stay on the same pos and just use the walking animation)
%================

% Don't move player
@Function 18E794 % 8025FEB4
{
    NOP
}

% Don't move Partner
@Function 18E7A0 % 8025FEC0
{
    NOP
}

% Don't use the "grab cap animation"
@Function:Battle 18E6F4 % 8025FE14
{
    LIO     A2, 00010004 % walking
    JAL	    ~Func:set_animation
    RESERVED
}


%================
% Patching FXs
%================

% Fire Flower - Fire Balls - Move balls to the opposite side when an enemy use a fire flower against Mario/Partner
@Function 37F834 % E007E114
{
    LIO     AT $37F834
    JR      AT
    NOP    
}

#new:Function $37F834
{
    PUSH    T0, T1, T2
    % Check if player is inside battle
    LABU    T0, 80074094 % load game state
    ORI     T1, R0, 1 % Battle
    BNE     T0, T1, .Skip
    NOP
    % Player is inside a battle
    %
    LIO     T0, 800DC070 % battleStatus
    LHU     T1, 172 (T0) % load currentTurnActorID
    % attacker is an enemy?
    SLTIU   T2, T1, 200 % .Actor:Enemy0
    BNE     T2, R0, .Skip
    NOP
    % Attacker is an enemy, throw the balls to the left side
    LIF     F22, -8.0
    BEQ     R0, R0, .End
    RESERVED
    .Skip
    % original code
    LIF     F22, 8.0
    .End
    POP     T0, T1, T2
    % restore vanilla code
    LIO     AT, E007E124
    JR      AT
    LUI	    AT, E008
}

% Fire Flower - Fire Balls - Make spread size smaller when an enemy use a fire flower against Mario/Partner
@Function 37F898 % E007E178
{
    LIO     AT $37F898
    JR      AT
    NOP
}

#new:Function $37F898
{
    PUSH    T0, T1, T2
    % Check if player is inside battle
    LABU    T0, 80074094 % load game state
    ORI     T1, R0, 1 % Battle
    BNE     T0, T1, .Skip
    NOP
    % Player is inside a battle
    %
    LIO     T0, 800DC070 % battleStatus
    LHU     T1, 172 (T0) % load currentTurnActorID
    % attacker is an enemy?
    SLTIU   T2, T1, 200 % .Actor:Enemy0
    BEQL    T2, R0, .End
    CLEAR   A0 % Attacker is an enemy
    .Skip
    % original code
    ORI     A0, R0, 50
    .End
    POP     T0, T1, T2
    % restore vanilla code
    ADDIU	S1, S1, 004C
    LIO     AT, E007E188
    JR      AT
    CVT.S.D	F0, F0
}

% Stats Boost Arrows

% Extend number cap from 9 to 99
%
% If amount is above 9 replace the symbol with
% the 2nd digit
%
% from func_E00AC2A4 % ~func:update_fx56
@Function 3AF524 % E00AC704
{
    LIO     AT, $E00AC704
    JR      AT
    NOP
}

#new:Function $E00AC704
{
    PUSH    T0, T1, T2
    % S7 = Amount (signed)
    % A2 = Amount
    %
    % check if amount from the arrow is >= 10`
    SLTIU   T0, A2, 10`
    BNE     T0, R0, .End
    NOP
    % Get left digit
    COPY    T1, A2
    ORI     T0, R0, 10`
    DIVU    T1, T0
    MFLO    T1 % T1 = left digit
    % get new number address
    LIO     V0, 66666667
    MULT	T1, V0
    SRA	    V0, T1, 31`
    MFHI	T2
    SRA	    V1, T2, 2
    SUBU	V1, V1, V0
    SLL	    V0, V1, 2
    ADDU	V0, V0, V1
    SLL	    V0, V0, 1
    SUBU	V0, T1, V0
    SLL	    V0, V0, 2
    LUI	    V1, E00B
    ADDU	V1, V1, V0
    LW	    V1, C7C8 (V1) % load new numbers
    .End
    POP     T0, T1, T2
    % restore vanilla code
    SW	    V1, 0014 (A1) % save symbol
    LUI	    A2, D838
    LIO     A0, 8009A66C
    LIO     AT, E00AC714
    JR      AT
    NOP
}