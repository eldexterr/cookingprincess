#import CookingGame_Cursor.mpat
#import CookingGame_Main.mpat

#new:Header $Header
{
	[MainScript] $Script_Main
	[Background] 80200000
	[EntryList] $EntryList
	[EntryCount] 1
}

#new:EntryList $EntryList
{
	~Vec4f:Entry0
}

#new:Function_Init $Function_Init
{
	PUSH    RA
	LIA     A0, 800B0CF0
	LIA     A1, "omo_tex"
	JAL     800654F0 % sprintf
	RESERVED
	CLEAR  V0
	JPOP   RA
}

#new:Script_Main $Script_Main
{
	%%%
	% Init level
	%%%
	%
	% set this level timer
	% time is formated as HHMMSSMsMs
	Call  $WriteAddress ( $Minigame_Data 2 00050000 0 .False ) % 05:00
	Exec  $Script_ClearMinigameData
	Call  $WriteAddress ( 800740A2 0 1 .False .False ) % spawn as Peach
	Call  DisablePlayerInput ( .True )
    Call  SetCamSpeed ( .Cam:Default *Fixed[3.0] )
    If *CameraMode == .False
        Call    SetZoneEnabled ( 2 .False )
    Else
        Call    SetZoneEnabled ( 0 .False )
        Call    SetZoneEnabled ( 1 .False )
    EndIf
	% generic
	Call  FadeOutMusic  ( 00000000 000001F4 ) % stop music
	Set   *GB_WorldLocation  .Location:Testing
	Call  SetCamPerspective  ( .Cam:Default 00000003 00000019 00000010 00001000 )
	Call  SetCamBGColor      ( .Cam:Default 00000000 00000000 00000000 )
	Call  SetCamEnabled      ( .Cam:Default .True )
	Call  SetCamLeadPlayer   ( .Cam:Default .False )
	Exec  $Script_EnterMap
    Exec  $Script_SetupTexturePan
    %Call  $Script_MakeEntities
    Call  MakeNpcs ( .False $NpcGroupList_lvl03 )
    %
	% Minigame scripts
	%
	Set   *GameState 3 % cooking game - start
    Exec  $Script_SetupMusic
    Exec  $Script_UpdateCursor
    Exec  $Script_BindScripts_Special
	Exec  $Script_InitItemEntities
	Exec  $Script_DispatchNewOrders_Init
	Return
	End
}

#new:Script $Script_SetupMusic
{
	Loop % wait until the game starts
		If *GameState == 4 % cooking game - step
			BreakLoop
		EndIf
		Wait	1
	EndLoop
	Call  SetMusicTrack ( 00000000 .Song:ShyGuyToybox 00000000 00000008 )
	Call  ClearAmbientSounds ( 250` )
	Return
	End
}

% NPCs

#new:NpcGroupList $NpcGroupList_lvl03
{
00000001 $NpcGroup_ShyGuy 	00000000
00000000 00000000 00000000 
}

#new:NpcGroup $NpcGroup_ShyGuy
{
00000001 $NpcSettings_Decoration ~vec3f:NPC_GourmetGuy
00A40D01 $Script_NPC_Init_Shy 00000000 00000000 0000010E 
~NoDrops
~Movement:NPC_GourmetGuy
~AnimationTable:NPC_GourmetGuy
00000000 00000000 00000000 00000000
}

#new:NpcSettings $NpcSettings_Decoration
{
00000000 00200025 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00630000 
}

#new:Script $Script_NPC_Init_Shy
{
    Call    BindNpcIdle ( .Npc:Self $Script_NPCIdle_Shy )
    Return
    End
}

% Ground pound from time to time to move part of the map
#new:Script $Script_NPCIdle_Shy
{
    % Bind colliders to models
    %
    % Left %
    Set *Var1 ~Collider:left_col_1
    Loop 12` % because the left side uses 12 collisions
        Call    ParentColliderToModel ( *Var1 ~Model:left_base )
        Add     *Var1 1
    EndLoop
    % Right %
    Set *Var1 ~Collider:right_col_1
    Loop 17` % because the left side uses 17 collisions
        Call    ParentColliderToModel ( *Var1 ~Model:left_base )
        Add     *Var1 1
    EndLoop
    % init wait time
    Set     *Var3 1300`
    Call    RandInt ( 200` *Var4 )
    Add     *Var3 *Var4
    Call    SetNpcVar ( .Npc:Self 0 *Var3 ) % frames to wait
    Loop
        Loop % wait to ground pound
            % get current score
            Call    $ReadAddress ( $Minigame_Data 2 *Var2 4 .False ) % get score
            Call    GetNpcVar ( .Npc:Self 0 *Var1 )
            Call 	$ReadAddress ( $PauseByte 0 *Var0 .False .False )
            If *Var0 == .False % the game isn't paused
                Sub     *Var1 1
                Call    SetNpcVar ( .Npc:Self 0 *Var1 )
                If *Var1 <= 0
                    BreakLoop
                EndIf
            EndIf
            Wait    1
            % check if player delivered an order
            Call    GetNpcVar ( .Npc:Self 2 *Var3 )
            If *Var3 > 0 % an order was delivered
                Call    SetNpcAnimation ( .Npc:Self 00C10005 ) % eating
                Loop 4
                    Call    PlaySound ( 2095 ) % ñam ñam ñam
                    Wait    10`
                EndLoop
                If *Var3 == 1 % correct order
                    Add     *Var1   50` % add 50 frames
                    Call    RandInt ( 30` *Var4 )
                    Add     *Var1 *Var4 % add bonus
                    Call    SetNpcVar ( .Npc:Self 0 *Var1 )
                    Call    GetNpcPos ( .Npc:Self *Var5 *Var6 *Var7 )
                    Add     *Var5 2 % x
                    Add     *Var6 58` % y
                    Add     *Var7 2` % z
                    Call    PlayEffect    ( ~FX:Recover:LittleHeart *Var5 *Var6 *Var7 00000001 .False .False .False .False .False .False .False .False )
                    Call    SetNpcAnimation ( .Npc:Self 00C1000B ) % jumping
                    Call    PlaySound ( 0213 ) % healing
                    Wait    15`
                    Call    SetNpcAnimation ( .Npc:Self 00C1000D ) % sit-down
                Else % wrong order
                    Sub     *Var1   50` % sub 50 frames
                    Call    RandInt ( 30` *Var4 )
                    Sub     *Var1 *Var4 % sub bonus
                    If *Var1 < 0
                        Set *Var1 0
                    EndIf
                    Call    SetNpcVar ( .Npc:Self 0 *Var1 )
                    Call    SetNpcAnimation ( .Npc:Self 00C10006 ) % spit
                    Call    PlaySound ( 2096 )
                    Wait    15`
                    Call    SetNpcAnimation ( .Npc:Self 00C1000D ) % sit-down
                EndIf
                Call    SetNpcVar ( .Npc:Self 2 .False )
            EndIf
        EndLoop
        % Ground pound
        Call    SetNpcAnimation ( .Npc:Self 00C10008 )
        Wait    30`
        Call    PlaySound ( 20BE )
        Call    SetNpcAnimation ( .Npc:Self 00C1000B ) % jumping
        Call    GetNpcPos ( .Npc:Self *Var0 *Var1 *Var2 )
        Call    SetNpcJumpscale ( .Npc:Self *Fixed[1.0] )
        Call    NpcJump1 ( .Npc:Self *Var0 *Var1 *Var2 15` )
        Call    PlaySound ( 00DD )
        Call    ShakeCam ( .Cam:Default 0 30` *Fixed[1.3] )
        Call    SetNpcAnimation ( .Npc:Self 00C1000D )
        Call    GetSelfVar ( 1 *Var0 )
        If *Var0 == 0
            ExecWait $Script_MoveModels_ToTheRight
            Call    SetSelfVar ( 1 .True )
        Else
            Call    SetSelfVar ( 1 .False )
            ExecWait $Script_MoveModels_ToTheLeft
        EndIf
        Call    PlaySound ( 223B )
        % init wait time
        Set     *Var3 1300`
        Call    RandInt ( 200` *Var4 )
        Add     *Var3 *Var4
        Call    SetNpcVar ( .Npc:Self 0 *Var3 ) % frames to wait
        Call    SetNpcVar ( .Npc:Self 2 .False )
    EndLoop
    Return
    End
}

#new:Script $Script_MoveModels_ToTheRight
{
    Call    MakeLerp    	( 0 150` 40` .Easing:QuadraticIn )
    Loop     
        Call     UpdateLerp
        Call     TranslateGroup ( ~Model:moving_platforms *Var0 0 0 )
        Exec     $Script_UpdateColliders
        Wait     1
        If  *Var1  ==  .False
            BreakLoop
        EndIf
    EndLoop
    Return
    End
}

#new:Script $Script_MoveModels_ToTheLeft
{
    Call    MakeLerp    	( 150` 0 40` .Easing:QuadraticIn )
    Loop     
        Call     UpdateLerp
        Call     TranslateGroup ( ~Model:moving_platforms *Var0 0 0 )
        Exec     $Script_UpdateColliders
        Wait     1
        If  *Var1  ==  .False
            BreakLoop
        EndIf
    EndLoop
    Return
    End
}

#new:Script $Script_UpdateColliders
{
    % Left %
    Set *Var1 ~Collider:left_col_1
    Loop 12` % because the left side uses 12 collisions
        Call    $GetColliderItem ( *Var1 *Var2 )
        Call    UpdateColliderTransform ( *Var1 )
        If *Var2 >= 0
            Call    $UpdateItemColliderTrasform ( *Var2 *Var1 )
        EndIf
        Add     *Var1 1
    EndLoop
    % Right %
    Set *Var1 ~Collider:right_col_1
    Loop 17` % because the left side uses 17 collisions
        Call    $GetColliderItem ( *Var1 *Var2 )
        Call    UpdateColliderTransform ( *Var1 )
        If *Var2 >= 0
            Call    $UpdateItemColliderTrasform ( *Var2 *Var1 )
        EndIf
        Add     *Var1 1
    EndLoop
    Return
    End
}

% lvl_05's - Delivery Point script
%
% Update Shy Guy's "angry" or "happy state"

#new:Script $Script_DeliveryPoint_lvl03 {
	% check if peach isn't holding any item
	Call 	$ReadAddress ( 800740A4 0 *Var1 .False .False )
	If *Var1 == .False
		Return
	EndIf
	% check which type of item Peach is carrying
	Call 	$ReadAddress ( $PeachStatus 0 *Var0 0 .False ) % itemType
	Call 	$ReadAddress ( $PeachStatus 0 *Var1 1 .False ) % itemIndex
	Switch	*Var0
        Case == .ItemType:BaseWCake % 7
            Call	$GetNextOrderItemID ( *Var2 )
            If *Var2 == -1 % there's no more orders available
                Return
            Else
                Call 	$ReadAddress ( $PeachStatus 1 *Var3 2 .False ) % itemID
                If *Var3 == *Var2 % correct item
                    % give points
                    %
                    % get order color
                    Call  	$GetNextOrderPointer ( *Var4 )
                    Switch	*Var4
                        Case == $Order1_Data
                            Set	*Var4 $BoxData_White1
                        Case == $Order2_Data
                            Set	*Var4 $BoxData_White2
                        Case == $Order3_Data
                            Set	*Var4 $BoxData_White3
                        Case == $Order4_Data
                            Set	*Var4 $BoxData_White4
                    EndSwitch
                    % get timer color
                    Call 	$ReadAddress ( *Var4 0 *Var5 4 .False ) % get boxColor1 - green
                    Call 	$ReadAddress ( $Minigame_Data 2 *Var6 4 .False ) % get score
                    Switch *Var5
                        Case == FF % White
                            Add  *Var6 20` % give 20 points
                        Case == FA % Yellow
                            Add  *Var6 15`
                        Case == 00 % Red
                            Add  *Var6 10`
                    EndSwitch
                    If *Var6 > 9999` % cap
                        Set *Var6 9999`
                    EndIf
                    Call 	$WriteAddress ( $Minigame_Data 2 *Var6 4 .False )
                    Call	$SetNextOrderState ( 1 40` ) % correct
                    Call    PlaySound ( 0010 ) % game saved
                    %
                    Call    SetNpcVar ( 00000001 2 1 ) % happy
                Else % incorrect item
                    % decrease points
                    Call 	$ReadAddress ( $Minigame_Data 2 *Var2 4 .False ) % get score
                    Sub	*Var2 10`
                    If *Var2 < 0
                        Set *Var2 0
                    EndIf
                    Call 	$WriteAddress ( $Minigame_Data 2 *Var2 4 .False )
                    Call	$SetNextOrderState ( 2 40` ) % wrong
                    Call    PlaySound ( 021D ) % error
                    Call    SetNpcVar ( 00000001 2 2 ) % angry
                EndIf
                Call    $DeleteItemData ( *Var1 )
                Call	$RunFunction ( $clear_peach_status )
            EndIf
	EndSwitch
    Return
    End
}

% Entities

#new:Script $Script_MakeEntities % crashes the game because this isn't AREA toy box
{
    Call  MakeEntity    ( .Entity:StarBoxLaucher ~Vec4d:Entity_StarBox1 80000000 )
    Call  AssignScript  ( $Script_null )
    Return
    End
}

#new:Script $Script_null
{
    Return
    End
}

% 

#new:Script $Script_BindScripts_Special {
	% Delivery Point
	Bind     $Script_DeliveryPoint_lvl03 .Trigger:WallPressA ~Collider:delivery1 00000001 00000000
	Bind     $Script_DeliveryPoint_lvl03 .Trigger:WallPressA ~Collider:delivery2 00000001 00000000
    Bind     $Script_DeliveryPoint_lvl03 .Trigger:WallPressA ~Collider:delivery3 00000001 00000000
	% Mix Points
	Bind     $Script_MixPoint .Trigger:WallPressA ~Collider:mixer1 00000001 00000000
    Bind     $Script_MixPoint .Trigger:WallPressA ~Collider:mixer2 00000001 00000000
	% Trash bin
	Bind     $Script_TrashBin .Trigger:WallPressA ~Collider:trash1 00000001 00000000
    Bind     $Script_TrashBin .Trigger:WallPressA ~Collider:trash2 00000001 00000000
    Bind     $Script_TrashBin .Trigger:WallPressA ~Collider:trash3 00000001 00000000
	% Stove
	Bind     $Script_Stove_1 .Trigger:WallPressA ~Collider:stove1 00000001 00000000
    Bind     $Script_Stove_2 .Trigger:WallPressA ~Collider:stove2 00000001 00000000
	% Cutting table
	Bind     $Script_Cutting .Trigger:WallPressA ~Collider:cutting1 00000001 00000000
    Bind     $Script_Cutting .Trigger:WallPressA ~Collider:cutting2 00000001 00000000
	% Dispatchers
    Bind     $Script_Dispatcher_Sugar .Trigger:WallPressA ~Collider:disp_sugar1 00000001 00000000
    Bind     $Script_Dispatcher_Sugar .Trigger:WallPressA ~Collider:disp_sugar2 00000001 00000000
    Bind     $Script_Dispatcher_Sugar .Trigger:WallPressA ~Collider:disp_sugar3 00000001 00000000
    Bind     $Script_Dispatcher_Egg .Trigger:WallPressA ~Collider:disp_egg1 00000001 00000000
    Bind     $Script_Dispatcher_Egg .Trigger:WallPressA ~Collider:disp_egg2 00000001 00000000
    Bind     $Script_Dispatcher_CakeMix .Trigger:WallPressA ~Collider:disp_flour1 00000001 00000000
    Bind     $Script_Dispatcher_CakeMix .Trigger:WallPressA ~Collider:disp_flour2 00000001 00000000
    Bind     $Script_Dispatcher_Cream .Trigger:WallPressA ~Collider:disp_cream 00000001 00000000
    Bind     $Script_Dispatcher_BubbleBerry .Trigger:WallPressA ~Collider:disp_bubble 00000001 00000000
    Return
    End
}

#new:Script $Script_InitItemEntities {
	% Init Mix Bowls
	Set	    *Var0 	~Collider:itemPos_Bowl1
	ExecWait $Script_GetItemPosForCollider
	Set		*Var3 .Item:CakeBowl
	Call	DropItemEntity ( *Var3 *Var0 *Var1 *Var2 .ItemSpawnMode:Decoration .False )
	Call 	$AddItemData ( .ItemType:Bowl *Var0 *Var3 )
	%
	Set	    *Var0 	~Collider:itemPos_Bowl2
	ExecWait $Script_GetItemPosForCollider
	Set		*Var3 .Item:CakeBowl
	Call	DropItemEntity ( *Var3 *Var0 *Var1 *Var2 .ItemSpawnMode:Decoration .False )
	Call 	$AddItemData ( .ItemType:Bowl *Var0 *Var3 )
	%
	% Init Molds
	%
	Set	    *Var0 	~Collider:itemPos_Mold1
	ExecWait $Script_GetItemPosForCollider
	Set		*Var3 .Item:CakePan
	Call	DropItemEntity ( *Var3 *Var0 *Var1 *Var2 .ItemSpawnMode:Decoration .False )
	Call 	$AddItemData ( .ItemType:Mold *Var0 *Var3 )
	%
	Set	    *Var0 	~Collider:itemPos_Mold2
	ExecWait $Script_GetItemPosForCollider
	Set		*Var3 .Item:CakePan
	Call	DropItemEntity ( *Var3 *Var0 *Var1 *Var2 .ItemSpawnMode:Decoration .False )
	Call 	$AddItemData ( .ItemType:Mold *Var0 *Var3 )
	Return
	End
}

#new:Script $Script_Stove_1 {
	SetConst *VarA *MapVar[0] % stove's bool
	SetConst *VarB *MapVar[1] % stove's itemIndex
    Set *MapVar[2] ~Model:stove1  % stove's model groupID
    SetConst *VarC *MapVar[2]
	Exec $Script_Stove
	Return
	End
}

#new:Script $Script_Stove_2 {
	SetConst *VarA *MapVar[3] % stove's bool
	SetConst *VarB *MapVar[4] % stove's itemIndex
    Set *MapVar[5] ~Model:stove2  % stove's model groupID
    SetConst *VarC *MapVar[5]
	Exec $Script_Stove
	Return
	End
}

% Possible orders for this level
#new:Unknown $OrdersTable_lvl03
{
	.Item:CakeCream1Bubble1 .Item:CakeCream1Bubble1 .Item:CakeCream1Bubble1 .Item:CakeCream1Bubble2 .Item:CakeCream1Bubble2
}

#new:Script $Script_DispatchNewOrders_Init
{
	Set		*Var4 $OrdersTable_lvl03
	Set		*Var5 5
	Exec	$Script_DispatchNewOrders
	Return
	End
}

%

#new:Script $Script_EnterMap
{
	Return
	End
}

#new:Script $Script_CreateExitTriggers
{
	Return
	End
}

% texture panners

#new:Script $Script_SetupTexturePan
{
	Call     802C9000 	( ~Model:band 0 )
	Thread
		Set  *Var[0] 0
		Set  *Var[1] 0
		Set  *Var[2] FFFFFE92
		Set  *Var[3] 0
		Set  *Var[4] 0
		Set  *Var[5] 0
		Set  *Var[6] 0
		Set  *Var[7] 0
		Set  *Var[8] 0
		Set  *Var[9] 0
		Set  *Var[A] 0
		Set  *Var[B] 0
		Set  *Var[C] 0
		Exec $Script_TexturePan_Update
	EndThread
	Return
	End
}

#new:Script $Script_TexturePan_Update
{
    SetGroup  00000000
    If  *Var[5]  ==  00000001
        If  *Var[6]  ==  00000001
            If  *Var[7]  ==  00000001
                If  *Var[8]  ==  00000001
                    Call  $Function_TexturePan_Simple ( )
                    Return
                EndIf
            EndIf
        EndIf
    EndIf
    Call  $Function_TexturePan_Complex ( )
    Return
    End
}

#new:Function $Function_TexturePan_Simple
{
    ADDIU       SP, SP, FFE8
    SW          S0, 10 (SP)
    COPY        S0, A0
    SW          RA, 14 (SP)
    LW          V1, A8 (S0)
    LW          V0, 88 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o30
    SW          V1, A8 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .o40
    ADDU        V0, V1, V0
    .o30
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .o44
    SUBU        V0, V1, A0
    .o40
    SW          V0, A8 (S0)
    .o44
    LW          V1, AC (S0)
    LW          V0, 8C (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o64
    SW          V1, AC (S0)
    LUI         V0, 2
    BEQ         R0, R0, .o74
    ADDU        V0, V1, V0
    .o64
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .o78
    SUBU        V0, V1, A0
    .o74
    SW          V0, AC (S0)
    .o78
    LW          V1, B0 (S0)
    LW          V0, 90 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o98
    SW          V1, B0 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .oA8
    ADDU        V0, V1, V0
    .o98
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .oAC
    SUBU        V0, V1, A0
    .oA8
    SW          V0, B0 (S0)
    .oAC
    LW          V1, B4 (S0)
    LW          V0, 94 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .oCC
    SW          V1, B4 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .oDC
    ADDU        V0, V1, V0
    .oCC
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .oE0
    SUBU        V0, V1, A0
    .oDC
    SW          V0, B4 (S0)
    .oE0
    LW          A0, 84 (S0)
    JAL         8011BC1C
    LW          A1, A8 (S0)
    LW          A0, 84 (S0)
    JAL         8011BC34
    LW          A1, AC (S0)
    LW          A0, 84 (S0)
    JAL         8011BC4C
    LW          A1, B0 (S0)
    LW          A0, 84 (S0)
    JAL         8011BC64
    LW          A1, B4 (S0)
    LW          RA, 14 (SP)
    LW          S0, 10 (SP)
    CLEAR       V0
    JR          RA
    ADDIU       SP, SP, 18
}

#new:Function $Function_TexturePan_Complex
{
    ADDIU       SP, SP, FFE8
    SW          S0, 10 (SP)
    COPY        S0, A0
    BEQ         A1, R0, .o24
    SW          RA, 14 (SP)
    SW          R0, 70 (S0)
    SW          R0, 74 (S0)
    SW          R0, 78 (S0)
    SW          R0, 7C (S0)
    .o24
    LW          V0, 70 (S0)
    BNE         V0, R0, .o64
    NOP
    LW          V1, A8 (S0)
    LW          V0, 88 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o50
    SW          V1, A8 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .o60
    ADDU        V0, V1, V0
    .o50
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .o64
    SUBU        V0, V1, A0
    .o60
    SW          V0, A8 (S0)
    .o64
    LW          V0, 74 (S0)
    BNE         V0, R0, .oA4
    NOP
    LW          V1, AC (S0)
    LW          V0, 8C (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o90
    SW          V1, AC (S0)
    LUI         V0, 2
    BEQ         R0, R0, .oA0
    ADDU        V0, V1, V0
    .o90
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .oA4
    SUBU        V0, V1, A0
    .oA0
    SW          V0, AC (S0)
    .oA4
    LW          V0, 78 (S0)
    BNE         V0, R0, .oE4
    NOP
    LW          V1, B0 (S0)
    LW          V0, 90 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .oD0
    SW          V1, B0 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .oE0
    ADDU        V0, V1, V0
    .oD0
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .oE4
    SUBU        V0, V1, A0
    .oE0
    SW          V0, B0 (S0)
    .oE4
    LW          V0, 7C (S0)
    BNE         V0, R0, .o124
    NOP
    LW          V1, B4 (S0)
    LW          V0, 94 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o110
    SW          V1, B4 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .o120
    ADDU        V0, V1, V0
    .o110
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .o124
    SUBU        V0, V1, A0
    .o120
    SW          V0, B4 (S0)
    .o124
    LW          A0, 84 (S0)
    JAL         8011BC1C
    LW          A1, A8 (S0)
    LW          A0, 84 (S0)
    JAL         8011BC34
    LW          A1, AC (S0)
    LW          A0, 84 (S0)
    JAL         8011BC4C
    LW          A1, B0 (S0)
    LW          A0, 84 (S0)
    JAL         8011BC64
    LW          A1, B4 (S0)
    LW          V0, 70 (S0)
    LW          V1, 78 (S0)
    LW          A0, 98 (S0)
    ADDIU       V0, V0, 1
    SW          V0, 70 (S0)
    LW          V0, 74 (S0)
    ADDIU       V1, V1, 1
    SW          V1, 78 (S0)
    LW          V1, 70 (S0)
    ADDIU       V0, V0, 1
    SW          V0, 74 (S0)
    LW          V0, 7C (S0)
    SLT         V1, V1, A0
    ADDIU       V0, V0, 1
    BNE         V1, R0, .o198
    SW          V0, 7C (S0)
    SW          R0, 70 (S0)
    .o198
    LW          V0, 74 (S0)
    LW          V1, 9C (S0)
    SLT         V0, V0, V1
    BEQL        V0, R0, .o1AC
    SW          R0, 74 (S0)
    .o1AC
    LW          V0, 78 (S0)
    LW          V1, A0 (S0)
    SLT         V0, V0, V1
    BEQL        V0, R0, .o1C0
    SW          R0, 78 (S0)
    .o1C0
    LW          V0, 7C (S0)
    LW          V1, A4 (S0)
    SLT         V0, V0, V1
    BEQL        V0, R0, .o1D4
    SW          R0, 7C (S0)
    .o1D4
    LW          RA, 14 (SP)
    LW          S0, 10 (SP)
    CLEAR       V0
    JR          RA
    ADDIU       SP, SP, 18
}
